<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Leviasan.System.DirectoryServices</name>
    </assembly>
    <members>
        <member name="T:System.DirectoryServices.AccountManagement.ActiveDirectoryProfileStore">
            <summary>
            Represents an active directory claim store.
            </summary>
        </member>
        <member name="F:System.DirectoryServices.AccountManagement.ActiveDirectoryProfileStore._disposedValue">
            <summary>
            To detect redundant calls <see cref="M:System.DirectoryServices.AccountManagement.ActiveDirectoryProfileStore.Dispose"/> method.
            </summary>
        </member>
        <member name="F:System.DirectoryServices.AccountManagement.ActiveDirectoryProfileStore._principalContext">
            <summary>
            The server or domain context.
            </summary>
        </member>
        <member name="M:System.DirectoryServices.AccountManagement.ActiveDirectoryProfileStore.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{System.DirectoryServices.AccountManagement.PrincipalContextOptions})">
            <summary>
            Initializes a new instance of <see cref="T:System.DirectoryServices.AccountManagement.ActiveDirectoryProfileStore"/> class.
            </summary>
            <param name="principalContextOptions">The principal context options.</param>
        </member>
        <member name="P:System.DirectoryServices.AccountManagement.ActiveDirectoryProfileStore.Issuer">
            <summary>
            The claim store name.
            </summary>
        </member>
        <member name="M:System.DirectoryServices.AccountManagement.ActiveDirectoryProfileStore.Dispose">
            <summary>
            Releases the unmanaged resources and releases the managed resources.
            </summary>
        </member>
        <member name="M:System.DirectoryServices.AccountManagement.ActiveDirectoryProfileStore.FindById(System.String)">
            <summary>
            Gets claims identity.
            </summary>
            <param name="userId">The user ID.</param>
            <returns>If user authentication is success, the property <see cref="P:System.Security.Claims.ClaimsIdentity.IsAuthenticated"/> will be true.</returns>
        </member>
        <member name="M:System.DirectoryServices.AccountManagement.ActiveDirectoryProfileStore.FindByName(System.String)">
            <summary>
            Gets claims identity.
            </summary>
            <param name="username">The account name.</param>
            <returns>If user authentication is success, the property <see cref="P:System.Security.Claims.ClaimsIdentity.IsAuthenticated"/> will be true.</returns>
        </member>
        <member name="M:System.DirectoryServices.AccountManagement.ActiveDirectoryProfileStore.IsLockedOut(System.String)">
            <summary>
            Checks is account locked out.
            </summary>
            <param name="username">The account name.</param>
            <returns>True if account locked out, otherwise false.</returns>
        </member>
        <member name="M:System.DirectoryServices.AccountManagement.ActiveDirectoryProfileStore.IsValidate(System.String,System.String)">
            <summary>
            Validates the credentials.
            </summary>
            <param name="username">The account name.</param>
            <param name="password">The account password.</param>
            <returns>True if the credential is valid, otherwise false.</returns>
        </member>
        <member name="M:System.DirectoryServices.AccountManagement.ActiveDirectoryProfileStore.GetUserId(System.String)">
            <summary>
            Gets user identifier if any.
            </summary>
            <param name="identityValue"></param>
            <returns>Return user identifier if any, otherwise null.</returns>
        </member>
        <member name="M:System.DirectoryServices.AccountManagement.ActiveDirectoryProfileStore.CreateClaimsIdentity(System.String)">
            <summary>
            Gets the authentication result. 
            Specifications: https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims
            </summary>
            <param name="identityValue">The identity of the user principal. This parameter can be any format that is contained in the <see cref="T:System.DirectoryServices.AccountManagement.IdentityType"/> enumeration.</param>
        </member>
        <member name="M:System.DirectoryServices.AccountManagement.ActiveDirectoryProfileStore.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:System.DirectoryServices.AccountManagement.PrincipalContextOptions">
            <summary>
            Represents of principal context options.
            </summary>
        </member>
        <member name="P:System.DirectoryServices.AccountManagement.PrincipalContextOptions.ContextType">
            <summary>
            Specifies the type of store to which the principal belongs.
            </summary>
        </member>
        <member name="P:System.DirectoryServices.AccountManagement.PrincipalContextOptions.Name">
            <summary>
            The name of the domain or server for <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Domain"/>
            context types, the machine name for <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Machine"/> 
            context types, or the name of the server and port hosting the <see cref="F:System.DirectoryServices.AccountManagement.ContextType.ApplicationDirectory"/>
            instance. If the name is null for a <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Domain"/> 
            context type this context is a domain controller for the domain of the user principal
            under which the thread is running. If the name is null for a <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Machine"/>
            context type, this is the local machine name. This parameter cannot be null for
            <see cref="F:System.DirectoryServices.AccountManagement.ContextType.ApplicationDirectory"/> context types.
            </summary>
        </member>
        <member name="P:System.DirectoryServices.AccountManagement.PrincipalContextOptions.Container">
            <summary>
            The container on the store to use as the root of the context. All queries are
            performed under this root, and all inserts are performed into this container.
            For <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Domain"/> and <see cref="F:System.DirectoryServices.AccountManagement.ContextType.ApplicationDirectory"/>
            context types, this parameter is the distinguished name of a container object.
            For <see cref="F:System.DirectoryServices.AccountManagement.ContextType.Machine"/> context types, this parameter must be set to null.
            </summary>
        </member>
        <member name="P:System.DirectoryServices.AccountManagement.PrincipalContextOptions.ContextOptions">
            <summary>
            A combination of one or more <see cref="T:System.DirectoryServices.AccountManagement.ContextOptions"/>
            enumeration values the options used to bind to the server. If this parameter
            is null, the default options are <see cref="F:System.DirectoryServices.AccountManagement.ContextOptions.Negotiate"/> | <see cref="F:System.DirectoryServices.AccountManagement.ContextOptions.Signing"/> | <see cref="F:System.DirectoryServices.AccountManagement.ContextOptions.Sealing"/>.
            </summary>
        </member>
        <member name="P:System.DirectoryServices.AccountManagement.PrincipalContextOptions.Username">
            <summary>
            The username used to connect to the store. If the username and password parameters
            are both null, the default credentials of the current principal are used. Otherwise,
            both username and password must be non-null, and the credentials they specify
            are used to connect to the store.
            </summary>
        </member>
        <member name="P:System.DirectoryServices.AccountManagement.PrincipalContextOptions.Password">
            <summary>
            The password used to connect to the store. If the username and password parameters
            are both null, the default credentials of the current principal are used. Otherwise,
            both username and password must be non-null, and the credentials they specify
            are used to connect to the store.
            </summary>
        </member>
        <member name="T:System.DirectoryServices.AccountManagement.PrincipalContextValidateOptions">
            <summary>
            Represents the validation class for <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContextOptions"/>.
            </summary>
        </member>
        <member name="M:System.DirectoryServices.AccountManagement.PrincipalContextValidateOptions.Validate(System.String,System.DirectoryServices.AccountManagement.PrincipalContextOptions)">
            <summary>
            Validates a specific named options instance (or all when name is null).
            </summary>
            <param name="name">The name of the options instance being validated.</param>
            <param name="options">The options instance.</param>
        </member>
        <member name="T:System.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Properties.Resources.InvalidCredentialException">
            <summary>
              Looks up a localized string similar to Invalid username or password..
            </summary>
        </member>
        <member name="T:System.Security.Claims.IProfileStore">
            <summary>
            Represents the service for authenticating users.
            </summary>
        </member>
        <member name="P:System.Security.Claims.IProfileStore.Issuer">
            <summary>
            The profile store name.
            </summary>
        </member>
        <member name="M:System.Security.Claims.IProfileStore.FindById(System.String)">
            <summary>
            Gets claims identity.
            </summary>
            <param name="userId">The user ID.</param>
            <returns>If user authentication is success, the property <see cref="P:System.Security.Claims.ClaimsIdentity.IsAuthenticated"/> will be true.</returns>
        </member>
        <member name="M:System.Security.Claims.IProfileStore.FindByName(System.String)">
            <summary>
            Gets claims identity.
            </summary>
            <param name="username">The account name.</param>
            <returns>If user authentication is success, the property <see cref="P:System.Security.Claims.ClaimsIdentity.IsAuthenticated"/> will be true.</returns>
        </member>
        <member name="M:System.Security.Claims.IProfileStore.IsLockedOut(System.String)">
            <summary>
            Checks is account locked out.
            </summary>
            <param name="username">The account name.</param>
            <returns>True if account locked out, otherwise false.</returns>
        </member>
        <member name="M:System.Security.Claims.IProfileStore.IsValidate(System.String,System.String)">
            <summary>
            Validates the credentials.
            </summary>
            <param name="username">The account name.</param>
            <param name="password">The account password.</param>
            <returns>True if the credential is valid, otherwise false.</returns>
        </member>
        <member name="T:System.Security.Claims.IProfileStoreManager">
            <summary>
            Represents the service for authenticating users through registered profile stores.
            </summary>
        </member>
        <member name="P:System.Security.Claims.IProfileStoreManager.Stores">
            <summary>
            The profile stores.
            </summary>
        </member>
        <member name="M:System.Security.Claims.IProfileStoreManager.FindById(System.String,System.String)">
            <summary>
            Gets claims identity if any from a specified profile store.
            </summary>
            <param name="provider">The profile store name.</param>
            <param name="userId">The user ID.</param>
            <returns>If user authentication is success, the property <see cref="P:System.Security.Claims.ClaimsIdentity.IsAuthenticated"/> will be true.</returns>
        </member>
        <member name="M:System.Security.Claims.IProfileStoreManager.FindByName(System.String,System.String)">
            <summary>
            Gets claims identity if any from a specified profile store.
            </summary>
            <param name="provider">The profile store name.</param>
            <param name="username">The account name.</param>
            <returns>If user authentication is success, the property <see cref="P:System.Security.Claims.ClaimsIdentity.IsAuthenticated"/> will be true.</returns>
        </member>
        <member name="M:System.Security.Claims.IProfileStoreManager.IsLockedOut(System.String,System.String)">
            <summary>
            Checks is account locked out from a specified profile store.
            </summary>
            <param name="provider">The profile store name.</param>
            <param name="username">The account name.</param>
        </member>
        <member name="M:System.Security.Claims.IProfileStoreManager.IsValidate(System.String,System.String,System.String)">
            <summary>
            Validates the credentials from a specified profile store.
            </summary>
            <param name="provider">The profile store name.</param>
            <param name="username">The account name.</param>
            <param name="password">The account password.</param>
        </member>
        <member name="T:System.Security.Claims.ProfileStoreManager">
            <summary>
            Represents the APIs for generating claims identity from specified stores.
            </summary>
        </member>
        <member name="F:System.Security.Claims.ProfileStoreManager._disposedValue">
            <summary>
            To detect redundant calls <see cref="M:System.Security.Claims.ProfileStoreManager.Dispose"/> method.
            </summary>
        </member>
        <member name="M:System.Security.Claims.ProfileStoreManager.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.IProfileStore})">
            <summary>
            Initializes a new instance of <see cref="T:System.Security.Claims.ProfileStoreManager"/> class with a specified claim stores.
            </summary>
            <param name="stores">The claim stores.</param>
        </member>
        <member name="P:System.Security.Claims.ProfileStoreManager.Stores">
            <summary>
            The profile stores.
            </summary>
        </member>
        <member name="P:System.Security.Claims.ProfileStoreManager.Issuer">
            <summary>
            The claim store issuer.
            </summary>
        </member>
        <member name="M:System.Security.Claims.ProfileStoreManager.Dispose">
            <summary>
            Releases the unmanaged resources and releases the managed resources. Disposes all <see cref="T:System.Security.Claims.IProfileStore"/> stores.
            </summary>
        </member>
        <member name="M:System.Security.Claims.ProfileStoreManager.FindById(System.String,System.String)">
            <summary>
            Finds and returns the claims, if any, who has the specified userId from external claim store.
            </summary>
            <param name="provider">The external claim store name.</param>
            <param name="userId">The user ID to search for.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Provider not found.</exception>
            <returns>If user authentication is success, the property <see cref="P:System.Security.Claims.ClaimsIdentity.IsAuthenticated"/> will be true.</returns>
        </member>
        <member name="M:System.Security.Claims.ProfileStoreManager.FindById(System.String)">
            <summary>
            Finds and returns the claims identity, if any, who has the specified userId.
            </summary>
            <param name="userId">The user ID to search for.</param>
            <returns>If user authentication is success, the property <see cref="P:System.Security.Claims.ClaimsIdentity.IsAuthenticated"/> will be true.</returns>
        </member>
        <member name="M:System.Security.Claims.ProfileStoreManager.FindByName(System.String,System.String)">
            <summary>
            Finds and returns the claims identity, if any, who has the specified normalized user name from external claim store.
            </summary>
            <param name="provider">The external claim store name.</param>
            <param name="username">The normalized user name to search for.</param>
            <returns>If user authentication is success, the property <see cref="P:System.Security.Claims.ClaimsIdentity.IsAuthenticated"/> will be true.</returns>
        </member>
        <member name="M:System.Security.Claims.ProfileStoreManager.FindByName(System.String)">
            <summary>
            Finds and returns the claims identity, if any, who has the specified normalized user name.
            </summary>
            <param name="username">The normalized user name to search for.</param>
            <returns>If user authentication is success, the property <see cref="P:System.Security.Claims.ClaimsIdentity.IsAuthenticated"/> will be true.</returns>
        </member>
        <member name="M:System.Security.Claims.ProfileStoreManager.IsLockedOut(System.String,System.String)">
            <summary>
            Checks is account locked out from external claim store.
            </summary>
            <param name="provider">The external claim store name.</param>
            <param name="username">The normalized user name to search for.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Provider not found.</exception>
            <returns>True if account locked out, otherwise false.</returns>
        </member>
        <member name="M:System.Security.Claims.ProfileStoreManager.IsLockedOut(System.String)">
            <summary>
            Checks is account locked out.
            </summary>
            <param name="username">The normalized user name to search for.</param>
            <returns>True if account locked out, otherwise false.</returns>
        </member>
        <member name="M:System.Security.Claims.ProfileStoreManager.IsValidate(System.String,System.String,System.String)">
            <summary>
            Validates the credentials from external claim store.
            </summary>
            <param name="provider">The external claim store name.</param>
            <param name="username">The normalized user name to search for.</param>
            <param name="password">The account password.</param>
            <returns>True if the credential is valid, otherwise false.</returns>
        </member>
        <member name="M:System.Security.Claims.ProfileStoreManager.IsValidate(System.String,System.String)">
            <summary>
            Validates the credentials.
            </summary>
            <param name="username">The normalized user name to search for.</param>
            <param name="password">The account password.</param>
            <returns>True if the credential is valid, otherwise false.</returns>
        </member>
        <member name="M:System.Security.Claims.ProfileStoreManager.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ActiveDirectoryProfileStoreExtensions">
            <summary>
            ASP.NET Core extensions for active directory claims store.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ActiveDirectoryProfileStoreExtensions.AddActiveDirectoryProfileStore(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            Adds service <see cref="T:System.Security.Claims.IProfileStore"/> with implementation <see cref="T:System.DirectoryServices.AccountManagement.ActiveDirectoryProfileStore"/>.
            </summary>
            <param name="services"></param>
            <param name="section"></param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ProfileStoreManagerExtensions">
            <summary>
            ASP.NET Core extensions for adds profile store manager in services.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ProfileStoreManagerExtensions.AddProfileStoreManager(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the service <see cref="T:System.Security.Claims.IProfileStoreManager"/> with implementation <see cref="T:System.Security.Claims.ProfileStoreManager"/>.
            </summary>
            <param name="services"></param>
        </member>
    </members>
</doc>
